{"version":3,"sources":["Nav.js","ImagePreview/index.js","Image.js","Spectrum.js","Tag.js","App.js","serviceWorker.js","index.js"],"names":["NavItem","sectionName","this","props","className","href","React","Component","Nav","role","data-spy","data-offset-top","ImagePreview","dataUri","classNameFullscreen","isFullscreen","src","Image","handleButtonClick","e","setState","isActionSheetVisible","actionSheetTarget","itemElement","onActionSheetItemClick","itemData","text","console","log","refs","fileUploader","click","photoMode","handleTakePhoto","handleCancelClick","handleFileUpload","event","file","URL","createObjectURL","target","files","handleRestore","state","Row","type","onClick","title","usePopover","visible","onItemClick","onCancelClick","id","ref","onChange","style","display","onTakePhoto","Spectrum","Tag","class","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed6062ae.chunk.js","sourcesContent":["import React from \"react\";\n// import Scrollspy from \"react-scrollspy\";\n\nclass NavItem extends React.Component {\n  render() {\n    const { sectionName } = this.props;\n    return (\n      <li className=\"nav-item p-1\">\n        <a href=\"../public/index.html\">\n          <span className=\"title\">{sectionName}</span>\n        </a>\n      </li>\n    );\n  }\n}\n\nclass Nav extends React.Component {\n  render() {\n    return (\n      <nav className=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\" role=\"navagation\">\n        <div className=\"sidebar-sticky\">\n          <div className=\"sidebar-inner\">\n            <ul\n              className=\"nav flex-column nav-pills nav-stacked\"\n              data-spy=\"affix\"\n              data-offset-top=\"205\"\n            >\n              <li className=\"text-center\">\n                <a href=\"../publicindex.html\">\n                  <h1>AstroSpec2</h1>\n                </a>\n              </li>\n              <NavItem sectionName=\"Dashboard\" />\n              <NavItem sectionName=\"Images\" />\n              <NavItem sectionName=\"Documents\" />\n            </ul>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles/imagePreview.css';\n\nexport const ImagePreview = ({ dataUri, isFullscreen }) => {\n  let classNameFullscreen = isFullscreen ? 'demo-image-preview-fullscreen' : '';\n\n  return (\n    <div className={'demo-image-preview ' + classNameFullscreen}>\n      <img src={dataUri} />\n    </div>\n  );\n};\n\nImagePreview.propTypes = {\n  dataUri: PropTypes.string,\n  isFullscreen: PropTypes.bool\n};\n\nexport default ImagePreview;\n","import React from \"react\";\nimport { Row } from \"react-bootstrap\";\nimport \"devextreme/dist/css/dx.common.css\";\nimport \"devextreme/dist/css/dx.light.css\";\nimport ActionSheet, { Item } from \"devextreme-react/action-sheet\";\nimport Camera from \"react-html5-camera-photo\";\nimport ImagePreview from \"./ImagePreview\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\n\nconst actionSheetItems = [{ text: \"Take Photo\" }, { text: \"Photo Library\" }];\n\nclass Image extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isActionSheetVisible: false,\n      actionSheetTarget: \"\",\n      file: null,\n      photoMode: false,\n      dataUri: \"\",\n    };\n  }\n\n  handleButtonClick = (e) => {\n    this.setState({\n      isActionSheetVisible: true,\n      actionSheetTarget: e.itemElement,\n    });\n  };\n\n  onActionSheetItemClick = (e) => {\n    this.setState({\n      isActionSheetVisible: false,\n    });\n    if (e.itemData.text == \"Photo Library\") {\n      console.log(\"File!\");\n      this.refs.fileUploader.click();\n    } else if (e.itemData.text == \"Take Photo\") {\n      console.log(\"Photo!\");\n      this.setState({ photoMode: true });\n    }\n  };\n\n  handleTakePhoto = (dataUri) => {\n    console.log(\"takePhoto\");\n    this.setState({\n      dataUri: dataUri,\n    });\n  };\n\n  handleCancelClick = () => {\n    this.setState({\n      isActionSheetVisible: false,\n    });\n    console.log(\"Quit\");\n  };\n\n  handleFileUpload = (event) => {\n    this.setState({\n      file: URL.createObjectURL(event.target.files[0]),\n    });\n  };\n\n  handleRestore = (event) => {\n    this.setState({\n      file: null,\n      photoMode: false,\n    });\n  };\n\n  render() {\n    return (\n      <Row>\n        <div className=\"col-md-12 col-lg-12\">\n          <div className=\"panel panel-default\">\n            <div className=\"panel-heading\">Image</div>\n            <div className=\"panel-body\">\n              <h3>Select image</h3>\n              <button\n                type=\"button\"\n                className=\"btn-lg btn-default\"\n                onClick={this.handleButtonClick}\n              >\n                File...\n              </button>\n              <ActionSheet\n                title=\"Choose action\"\n                usePopover={true}\n                visible={this.state.isActionSheetVisible}\n                target={this.state.actionSheetTarget}\n                onItemClick={this.onActionSheetItemClick}\n                onCancelClick={this.handleCancelClick}\n              >\n                <Item text={\"Take Photo\"} />\n                <Item text={\"Photo Library\"} />\n              </ActionSheet>\n              <input\n                type=\"file\"\n                id=\"file\"\n                ref=\"fileUploader\"\n                onChange={this.handleFileUpload}\n                style={{ display: \"none\" }}\n              />\n              <div>\n                {this.state.photoMode &&\n                  (this.state.dataUri ? (\n                    <ImagePreview\n                      dataUri={this.state.dataUri}\n                      isFullscreen={false}\n                    />\n                  ) : (\n                    <Camera\n                      onTakePhoto={this.handleTakePhoto}\n                      isFullscreen={false}\n                    />\n                  ))}\n              </div>\n              {!this.state.photoMode && (\n                <div>\n                  <img src={this.state.file} />\n                </div>\n              )}\n              <ReactCrop src={this.state.file} />\n\n              <p className=\"help-block\">Take photo with lens attachment</p>\n              <form className=\"form-inline\">\n                <div className=\"btn-toolbar\">\n                  <button type=\"button\" className=\"btn btn-primary btn-lg\">\n                    Crop\n                  </button>\n                  <button type=\"button\" className=\"btn btn-info btn-lg\">\n                    Spectrum\n                  </button>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-danger btn-lg\"\n                    onClick={this.handleRestore}\n                  >\n                    Restore\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </Row>\n    );\n  }\n}\n\nexport default Image;\n","import React from \"react\";\n\nclass Spectrum extends React.Component {\n  render() {\n    return (\n      <div className=\"col-md-8\">\n        <div className=\"panel panel-primary\">\n          <div className=\"panel-heading\">Spectrum</div>\n          <div className=\"panel-body\">\n            <img id=\"SpecImage\" src=\"\" className=\"img-responsive\" />\n            <canvas id=\"CanInvis\" className=\"hidden\"></canvas>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Spectrum;\n","import React from \"react\";\n\nclass Tag extends React.Component {\n  render() {\n    return (\n      <div class=\"col-md-4\">\n        <div class=\"panel panel-warning\">\n          <div class=\"panel-heading\">Tag</div>\n          <div class=\"panel-body\">\n            <form role=\"form\">\n              <div class=\"form-group\">\n                <select id=\"lampselect\" class=\"form-control\">\n                  <option>1</option>\n                  <option>2</option>\n                  <option>3</option>\n                  <option>4</option>\n                  <option>5</option>\n                  <option>6</option>\n                  <option>7</option>\n                  <option>Incandescent</option>\n                  <option>Flourescent</option>\n                  <option>Halogen</option>\n                  <option>Sun</option>\n                </select>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Tag;\n","import React from \"react\";\nimport \"./App.css\";\nimport Nav from \"./Nav\";\nimport Image from \"./Image\";\nimport Spectrum from \"./Spectrum\";\nimport Tag from \"./Tag\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container-fluid\">\n        <Nav />\n        <div className=\"col-lg-10 col-md-10 col-sm-10 col-xs-10\">\n          <main>\n            <div>\n              <h1>AST 1001: AstroSpec</h1>\n              <p className=\"text-center\">\n                Compute one-dimensional cut across images and display spectrum.\n              </p>\n            </div>\n            <Image />\n            <div className=\"row\">\n              <Spectrum />\n              <Tag />\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}